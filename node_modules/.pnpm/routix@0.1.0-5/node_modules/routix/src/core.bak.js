import reader from '@/read'
import builder from '@/build'
import { parseOptions } from '@/options'

let globalRead

const noWriteWarning =
  'Both routes and tree generation are disabled, routix will do nothing'

const IS_ROUTIX = Symbol('routix_core')

export default function resolveRoutix(arg) {
  if (arg[IS_ROUTIX]) return arg

  const options = parseOptions(arg)
  const { write, watch, log } = options

  if (!write.routes && !write.tree) {
    log.warn(noWriteWarning)
  }

  if (globalRead) {
    log.info('Closing previous watchers')
    globalRead.close()
  }

  const build = builder(options)

  const read = reader(
    {
      ...options,
      // NOTE CheapWatch bails out if watch is not a bool
      watch: watch != null ? watch : !!process.env.ROLLUP_WATCH,
    },
    build
  )

  // don't share instance when running in test
  if (process.env.NODE_ENV !== 'test') {
    globalRead = read
  }

  const readyPromise = read.init()

  const writeTargets = Object.values(write).filter(Boolean)

  const isWriteTarget = id => writeTargets.some(x => x === id)

  return {
    [IS_ROUTIX]: true,
    options,
    read,
    build,
    readyPromise,
    isWriteTarget,
  }
}
