import * as fs from 'fs'
import * as path from 'path'
import CheapWatch from 'cheap-watch'

import { pipe, map } from '@/util/fp'

const logErr = err => {
  // eslint-disable-next-line no-console
  console.error('[routix]', err)
}

const whenDirectoryExists = async (dir, run, meanwhile) => {
  try {
    const stats = await fs.promises.stat(dir)
    if (stats.isDirectory()) return run()
  } catch (err) {
    if (err.code !== 'ENOENT') throw err
  }

  if (meanwhile) meanwhile()

  const basename = path.basename(dir)

  const filter = ({ path, stats }) => path === basename && stats.isDirectory()

  const watch = new CheapWatch({ dir: path.dirname(dir), filter })

  watch
    .init()
    .then(
      () =>
        new Promise(resolve => {
          watch.on('+', () => {
            watch.close()
            resolve()
          })
        })
    )
    .then(run)
    .catch(logErr)
}

export default ({ dir, extensions, watch = false }, build) => {
  const filter = ({ path, stats }) =>
    stats.isDirectory() || extensions.some(x => path.endsWith(x))

  // eslint-disable-next-line no-console
  log.info(
    `${watch ? 'Watching' : 'Reading'} ${dir}/**/*.(${extensions
      .map(x => x.slice(1))
      .join('|')})`
  )

  let watcher

  const createWatcher = () => {
    watcher = new CheapWatch({ dir, watch, filter })

    watcher.on('+', ({ path, stats, isNew }) => {
      if (isNew) {
        build.add([path, stats])
      } else {
        build.update([path, stats])
      }
    })

    watcher.on('-', ({ path, stats }) => {
      // guard: watched dir has been deleted
      if (!path) {
        watcher.close()
        whenDirectoryExists(dir, createWatcher).catch(err => log.error(err))
        return
      }
      build.remove([path, stats])
    })

    return watcher
  }

  createWatcher()

  const addInitPaths = pipe(() => watcher.paths, map(build.add), build.start)

  const close = () => watcher.close()

  // guard: not watching
  if (!watch) {
    const init = () => watcher.init().then(addInitPaths)
    return { init, close }
  }

  const init = () =>
    whenDirectoryExists(
      dir,
      () => watcher.init().then(addInitPaths),
      build.start
    )

  return { init, close }
}
